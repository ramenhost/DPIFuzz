DPIFuzz
=====================
DPIFuzz is a differential fuzzing framework which has been designed with the intent of uncovering DPI Elusion strategies for QUIC. The differential fuzzing framework can be extended to compare various aspects of QUIC server implementations in addition to the demonstrated purpose of uncovering DPI elusion strategies. The fuzzer that powers DPIFuzz can also be run in a non-differential mode to independently test server-side implementations of QUIC as well.

The framework uses the high level QUIC API provided by QUIC-Tracker(a test suite which comprises a minimal Go implementation of QUIC). It is currently draft-27 and TLS-1.3 compatible; however, the highly modular architecture allows it to be readily extended to support all the corresponding versions of QUIC drafts as well.

Overview of the repository
--------------------------
The repository is structured in the following way:

* ``bin/fuzzer/`` -- Contains 2 binary files and a text file:
                    * ``fuzzer_runner.go`` - This file runs a single instance of a fuzzer against a single host. It initialises the necessary structures required to keep track of one iteration of a fuzzer against a single host.
                    * ``modular_differential_fuzzer.go`` - This file is used to execute multiple instances of the fuzzer against multiple hosts and performs a comparative analysis of the results of the fuzzer iterations against different hosts; thereby facilitating differential analysis. It uses a ``.txt`` file to provide the list of hosts against which to run the fuzzer. It can also run multiple instances of the fuzzer against a single host and not perform differntial analysis.
                    * ``hosts.txt`` - This file lists the hosts whose behaviour we want to compare with each other. The format of specifying a host is - ``<host_ip_address:port number>[tab space]<path to request when performing tests that needs data to be sent)>[tab space]<port serving http3 traffic>[tab space]<alpn prefix>``

* ``generators/`` -- Contains four different generators used to generate sequences of QUIC packets:
                    * Basic Stream Reassembly (``stream_reassembly.go``)
                    * Flow-Control-Aware Stream Reassembly (``general_stream_reassembly.go``)
                    * Overlapping Offset (``overlapping_offset.go``)
                    * Randomised (``randomised.go``)

* ``mutators/`` -- Contains two types of mutators used to perform mutation on the sequences of packets produced by the generators:
                    * Sequence Level Mutations (``sequence_level.go``) - Mutations for the sequence as a whole
                    * Packet Level Mutations (``packet_level.go``) - Mutations for individual packets in a sequence

* ``fuzzer/`` -- Contains two files:
                    * ``fuzzer.go`` - This is the actual fuzzer code which calls the generators and mutators, send the packets to the Implementation Under Test(IUT) and monitors the IUT response. This file is executed by ``fuzzer_runner.go`` in ``bin/fuzzer/``.
                    * ``structure.go`` - This contains the structures required for execution of a fuzzer instance against a host.

Output Files Generated by DPIFuzz [Priority Update]
---------------------------------
When the modular_differential_fuzzer.go script in ``bin/fuzzer/`` is run without specifying any value for the generator flag, it will execute the fuzzer using all the generators against all the hosts specified in a hosts.txt file. In case more than one host is specified, the results of the execution will be the following two .txt files


1. comparison_results.txt :- This specifies all the executions of the fuzzer, where a difference in behaviour was detected between the hosts being tested.
2. seed_map.txt :- This contains a list of source values used for a random number generator for each execution of the fuzzer. This can be used to regenerate the sequence of packets that detected the differences in implementations.



Build Instructions
------------------

You should have Go 1.9, tcpdump, libpcap libraries as well as 
openssl installed before starting.

Run these command as well

::

    sudo apt-get install faketime libscope-guard-perl libtest-tcp-perl

    sudo apt-get install make

    sudo apt-get install cmake

    sudo apt-get install build-essential

    sudo apt-get install pkg-config

    sudo apt-get install libssl-dev

Follow this with:

::

    go get -u github.com/QUIC-Tracker/quic-tracker  # This will fail because of the missing dependencies that should be build using the 4 lines below
    cd $GOPATH/src/github.com/mpiraux/pigotls
    make
    cd $GOPATH/src/github.com/mpiraux/ls-qpack-go
    make
    cd $GOPATH/src/github.com/QUIC-Tracker
    rm -rf quic-tracker
    git clone https://github.com/piano-man/DPIFuzz.git
    mv ./DPIFuzz ./quic-tracker


Execution Commands
------------------
::

    go run bin/fuzzer/modular_differential_fuzzer.go -h
    go run bin/fuzzer/fuzzer_runner.go -h
